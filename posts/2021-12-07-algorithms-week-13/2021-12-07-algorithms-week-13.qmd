---
title: "Algorithms Week 13"
author: "Siyun Min"
date: "2021-12-07"
categories: [SSU]
---
# Algorithms week 13

## Outline

![image-20211207124410764](./image-20211207124410764.png)

## Greedy algorithms

![image-20211207125150921](./image-20211207125150921.png)

## Non-example

![image-20211207125159135](./image-20211207125159135.png)

![image-20211207125207413](./image-20211207125207413.png)

## Activity selection

### Example where greedy works

![image-20211207125230959](./image-20211207125230959.png)

## Activity selection

![image-20211207125243425](./image-20211207125243425.png)

## Greedy algorithm

![image-20211207125255106](./image-20211207125255106.png)

![image-20211207125643256](./image-20211207125643256.png)

![image-20211207125650404](./image-20211207125650404.png)

![image-20211207125659201](./image-20211207125659201.png)

![image-20211207125707809](./image-20211207125707809.png)

![image-20211207125714728](./image-20211207125714728.png)

![image-20211207125723888](./image-20211207125723888.png)

![image-20211207125731144](./image-20211207125731144.png)

## At least it's fast

![image-20211207125743376](./image-20211207125743376.png)

## What makes it greedy?

![image-20211207125758193](./image-20211207125758193.png)

## Three questions

![image-20211207130139784](./image-20211207130139784.png)

## Answers

![image-20211207130150462](./image-20211207130150462.png)

## Back to activity selection

![image-20211207130204867](./image-20211207130204867.png)

## Why does it work?

![image-20211207130216147](./image-20211207130216147.png)

## Assuming we can prove that

![image-20211207130228086](./image-20211207130228086.png)

## We never rule out an optimal solution

![image-20211207130521888](./image-20211207130521888.png)

![image-20211207130532927](./image-20211207130532927.png)

![image-20211207130541551](./image-20211207130541551.png)

![image-20211207130550915](./image-20211207130550915.png)

![image-20211207130601278](./image-20211207130601278.png)

![image-20211207130610059](./image-20211207130610059.png)

![image-20211207130631355](./image-20211207130631355.png)

## So the algorithm is correct

![image-20211207130650827](./image-20211207130650827.png)

## Sub-problem graph view

![image-20211207131200965](./image-20211207131200965.png)

![image-20211207131207103](./image-20211207131207103.png)

![image-20211207131214932](./image-20211207131214932.png)

![image-20211207131223065](./image-20211207131223065.png)

## Answers

![image-20211207131233461](./image-20211207131233461.png)

## Another example: Huffman coding

![image-20211207131250435](./image-20211207131250435.png)

![image-20211207131258723](./image-20211207131258723.png)

## Suppose we have some distribution on characters

![image-20211207131316733](./image-20211207131316733.png)

## Try 0

![image-20211207131323243](./image-20211207131323243.png)

![image-20211207131328719](./image-20211207131328719.png)

![image-20211207131805446](./image-20211207131805446.png)

## Try 1

![image-20211207131828773](./image-20211207131828773.png)

## Try 2: prefix-free coding

![image-20211207131851032](./image-20211207131851032.png)

![image-20211207131907776](./image-20211207131907776.png)

![image-20211207131916155](./image-20211207131916155.png)

![image-20211207131924584](./image-20211207131924584.png)

## A prefix-free code is a tree

![image-20211207131940349](./image-20211207131940349.png)

## Some trees are better than others

![image-20211207131953121](./image-20211207131953121.png)

## Question

![image-20211207132002609](./image-20211207132002609.png)

## Optimal sub-structure

![image-20211207132012989](./image-20211207132012989.png)

## In order to design a greedy algorithm

![image-20211207132026488](./image-20211207132026488.png)

## Solution

greedily build subtrees, starting with the infrequent letters

![image-20211207132045635](./image-20211207132045635.png)

![image-20211207132054696](./image-20211207132054696.png)

![image-20211207132100843](./image-20211207132100843.png)

![image-20211207132107452](./image-20211207132107452.png)

![image-20211207132116352](./image-20211207132116352.png)

![image-20211207132125129](./image-20211207132125129.png)

## What exactly was the algorithm?

![image-20211207132138686](./image-20211207132138686.png)

## Does it work?

![image-20211207132717578](./image-20211207132717578.png)

## What have we learned?

![image-20211207132729107](./image-20211207132729107.png)

## Recap I

![image-20211207132738317](./image-20211207132738317.png)

## Minimum spanning tree

![image-20211207132748707](./image-20211207132748707.png)

## Minimum spanning tree

![image-20211207132800492](./image-20211207132800492.png)

![image-20211207133312410](./image-20211207133312410.png)

![image-20211207133320125](./image-20211207133320125.png)

![image-20211207133327857](./image-20211207133327857.png)

![image-20211207133335355](./image-20211207133335355.png)

## Why MSTs?

![image-20211207133352369](./image-20211207133352369.png)

## Idea 1

![image-20211207133405724](./image-20211207133405724.png)

![image-20211207133413229](./image-20211207133413229.png)

![image-20211207133420158](./image-20211207133420158.png)

![image-20211207133427278](./image-20211207133427278.png)

![image-20211207133434180](./image-20211207133434180.png)

![image-20211207133441720](./image-20211207133441720.png)

![image-20211207133449792](./image-20211207133449792.png)

![image-20211207133455751](./image-20211207133455751.png)

## We've discovered Prim's algorithm!

![image-20211207133518905](./image-20211207133518905.png)

## Question

![image-20211207134032338](./image-20211207134032338.png)

## How do we actually implement this?

![image-20211207134047136](./image-20211207134047136.png)

![image-20211207134148373](./image-20211207134148373.png)

![image-20211207134136742](./image-20211207134136742.png)

## Efficient implementation

![image-20211207134430747](./image-20211207134430747.png)

![image-20211207134445691](./image-20211207134445691.png)

![image-20211207134453471](./image-20211207134453471.png)

![image-20211207134502336](./image-20211207134502336.png)

![image-20211207134511684](./image-20211207134511684.png)

![image-20211207134519342](./image-20211207134519342.png)

![image-20211207134527768](./image-20211207134527768.png)

![image-20211207134535359](./image-20211207134535359.png)

![image-20211207134543507](./image-20211207134543507.png)

![image-20211207134552336](./image-20211207134552336.png)

![image-20211207134601368](./image-20211207134601368.png)

![image-20211207134609199](./image-20211207134609199.png)

![image-20211207134618035](./image-20211207134618035.png)

![image-20211207134625973](./image-20211207134625973.png)

![image-20211207134632861](./image-20211207134632861.png)

![image-20211207134640126](./image-20211207134640126.png)

![image-20211207134646017](./image-20211207134646017.png)

## This should look pretty familiar

![image-20211207134700872](./image-20211207134700872.png)

## One thing that is similar: running time

![image-20211207135209167](./image-20211207135209167.png)

## Code

![image-20211207135217731](./image-20211207135217731.png)

## That's not the only greedy algorithm

![image-20211207135232436](./image-20211207135232436.png)

![image-20211207135240236](./image-20211207135240236.png)

![image-20211207135257433](./image-20211207135257433.png)

![image-20211207135303049](./image-20211207135303049.png)

![image-20211207135308324](./image-20211207135308324.png)

![image-20211207135312825](./image-20211207135312825.png)

![image-20211207135321039](./image-20211207135321039.png)

![image-20211207135329210](./image-20211207135329210.png)

![image-20211207135334453](./image-20211207135334453.png)

![image-20211207135339882](./image-20211207135339882.png)

## We've discovered Kruskal's algorithm!

![image-20211207135355389](./image-20211207135355389.png)

## Question

![image-20211207140949415](./image-20211207140949415.png)

## At each step of Kruskal's, we are maintaining a forest

![image-20211207141009574](./image-20211207141009574.png)

![image-20211207141015822](./image-20211207141015822.png)

![image-20211207141022055](./image-20211207141022055.png)

![image-20211207141028740](./image-20211207141028740.png)

![image-20211207141034734](./image-20211207141034734.png)

## Union-find data structure also called disjoint-set data structure

![image-20211207141052286](./image-20211207141052286.png)

![image-20211207141058341](./image-20211207141058341.png)

![image-20211207141104364](./image-20211207141104364.png)

## Kruskal pseudo-code

![image-20211207141117012](./image-20211207141117012.png)

## Once more...

![image-20211207141448215](./image-20211207141448215.png)

![image-20211207141454494](./image-20211207141454494.png)

![image-20211207141501260](./image-20211207141501260.png)

![image-20211207141506607](./image-20211207141506607.png)

![image-20211207141512251](./image-20211207141512251.png)

![image-20211207141517618](./image-20211207141517618.png)

![image-20211207141524970](./image-20211207141524970.png)

![image-20211207141531540](./image-20211207141531540.png)

![image-20211207141538068](./image-20211207141538068.png)

![image-20211207141541742](./image-20211207141541742.png)

## Running time

![image-20211207141551496](./image-20211207141551496.png)

## Compare and contrast

![image-20211207141601905](./image-20211207141601905.png)

## Both Prim and Kruskal

![image-20211207141612359](./image-20211207141612359.png)

## Recap

![image-20211207141621642](./image-20211207141621642.png)
