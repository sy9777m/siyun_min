---
title: "Co-op SAP Track 20221005 - GROUPING"
author: "Siyun Min"
date: "2022-10-05"
categories: [SSU, SAP]
---
# 20221005 - GROUPING

## GROUPING

Aggregate 함수를 사용하려면 SELECT 구문에 GROUP BY를 기술

- AVG - 평균
- COUNT - 개수
- MAX - 최대값
- MIN - 최소값
- STDDEV - 표준편차
- SUM - 합계
- VARIANCE - 분산

![Untitled](./Untitled.png)

```abap
DATA: BEGIN OF GS_SFLIGHT,
  CARRID TYPE SFLIGHT-CARRID,
  CONNID TYPE SFLIGHT-CONNID,
  GV_SUM TYPE I,
END OF GS_SFLIGHT.
DATA: GT_SFLIGHT LIKE TABLE OF GS_SFLIGHT.

SELECT CARRID
  CONNID
  AVG( PRICE ) AS GV_SUM
  INTO CORRESPONDING FIELDS OF TABLE GT_SFLIGHT
  FROM SFLIGHT GROUP BY CARRID CONNID.

LOOP AT GT_SFLIGHT INTO GS_SFLIGHT.
  WRITE: / GS_SFLIGHT-CARRID, GS_SFLIGHT-CONNID, GS_SFLIGHT-GV_SUM.
ENDLOOP.
```

![Untitled](./Untitled%201.png)

## HAVING

GROUP BY로 조회한 SELECT 구문에 그룹의 조건 추가

![Untitled](./Untitled%202.png)

![Untitled](./Untitled%203.png)

```abap
DATA: BEGIN OF GS_SFLIGHT,
  CARRID TYPE SFLIGHT-CARRID,
  CONNID TYPE SFLIGHT-CONNID,
  GV_SUM TYPE I,
END OF GS_SFLIGHT.
DATA: GT_SFLIGHT LIKE TABLE OF GS_SFLIGHT.

SELECT CARRID
  CONNID
  AVG( PRICE ) AS GV_SUM
  INTO CORRESPONDING FIELDS OF TABLE GT_SFLIGHT
  FROM SFLIGHT GROUP BY CARRID CONNID
  HAVING AVG( PRICE ) > 1000.

LOOP AT GT_SFLIGHT INTO GS_SFLIGHT.
  WRITE: / GS_SFLIGHT-CARRID, GS_SFLIGHT-CONNID, GS_SFLIGHT-GV_SUM.
ENDLOOP.
```

![Untitled](./Untitled%204.png)

## ORDER BY

SELECT 결과로 조회된 데이터가 ORDER BY에 기술된 칼럼 기준으로 정렬

![Untitled](./Untitled%205.png)

![Untitled](./Untitled%206.png)

```abap
DATA: BEGIN OF GS_SFLIGHT,
  CARRID TYPE SFLIGHT-CARRID,
  CONNID TYPE SFLIGHT-CONNID,
  GV_SUM TYPE I,
END OF GS_SFLIGHT.
DATA: GT_SFLIGHT LIKE TABLE OF GS_SFLIGHT.

SELECT CARRID
  CONNID
  AVG( PRICE ) AS GV_SUM
  INTO CORRESPONDING FIELDS OF TABLE GT_SFLIGHT
  FROM SFLIGHT GROUP BY CARRID CONNID
  HAVING AVG( PRICE ) > 1000
  ORDER BY CARRID.

LOOP AT GT_SFLIGHT INTO GS_SFLIGHT.
  WRITE: / GS_SFLIGHT-CARRID, GS_SFLIGHT-CONNID, GS_SFLIGHT-GV_SUM.
ENDLOOP.
```

![Untitled](./Untitled%207.png)

![Untitled](./Untitled%208.png)

```abap
DATA: BEGIN OF GS_SFLIGHT,
  CARRID TYPE SFLIGHT-CARRID,
  CONNID TYPE SFLIGHT-CONNID,
  GV_SUM TYPE I,
END OF GS_SFLIGHT.
DATA: GT_SFLIGHT LIKE TABLE OF GS_SFLIGHT.

SELECT CARRID
  CONNID
  AVG( PRICE ) AS GV_SUM
  INTO CORRESPONDING FIELDS OF TABLE GT_SFLIGHT
  FROM SFLIGHT GROUP BY CARRID CONNID
  HAVING AVG( PRICE ) > 1000
  ORDER BY CARRID DESCENDING.

LOOP AT GT_SFLIGHT INTO GS_SFLIGHT.
  WRITE: / GS_SFLIGHT-CARRID, GS_SFLIGHT-CONNID, GS_SFLIGHT-GV_SUM.
ENDLOOP.
```

![Untitled](./Untitled%209.png)

![Untitled](./Untitled%2010.png)

![Untitled](./Untitled%2011.png)

```abap
DATA: BEGIN OF GS_SFLIGHT,
  CARRID TYPE SFLIGHT-CARRID,
  CONNID TYPE SFLIGHT-CONNID,
  GV_SUM TYPE I,
END OF GS_SFLIGHT.
DATA: GT_SFLIGHT LIKE TABLE OF GS_SFLIGHT.

SELECT CARRID
  CONNID
  AVG( PRICE ) AS GV_SUM
  INTO CORRESPONDING FIELDS OF TABLE GT_SFLIGHT
  FROM SFLIGHT GROUP BY CARRID CONNID
  HAVING AVG( PRICE ) > 1000
  ORDER BY GV_SUM.

LOOP AT GT_SFLIGHT INTO GS_SFLIGHT.
  WRITE: / GS_SFLIGHT-CARRID, GS_SFLIGHT-CONNID, GS_SFLIGHT-GV_SUM.
ENDLOOP.
```

![Untitled](./Untitled%2012.png)

## Subquery

Subquery는 SELECT 구문의 WHERE 조건에 또 다른 SELECT 구문을 추가하여 값을 제한

Subquery를 이용해 특별한 조건을 WHERE 구문에 추가

Subquery의 SELECT 구문에는 칼럼 하나만 선언

![Untitled](./Untitled%2013.png)

![Untitled](./Untitled%2014.png)

```abap
DATA: BEGIN OF GS_SFLIGHT,
  CARRID TYPE SFLIGHT-CARRID,
  CONNID TYPE SFLIGHT-CONNID,
  PRICE TYPE SFLIGHT-PRICE,
END OF GS_SFLIGHT.
DATA: GT_SFLIGHT LIKE TABLE OF GS_SFLIGHT.

SELECT CARRID CONNID PRICE FROM SFLIGHT
  INTO CORRESPONDING FIELDS OF TABLE GT_SFLIGHT
  WHERE CARRID IN ( SELECT CARRID
                      FROM SPFLI
                     WHERE CARRID = SFLIGHT~CARRID AND CONNID = SFLIGHT~CONNID )
  AND CARRID = 'AA'
  AND CONNID LIKE '00%'.

LOOP AT GT_SFLIGHT INTO GS_SFLIGHT.
  WRITE: / GS_SFLIGHT-CARRID, GS_SFLIGHT-CONNID, GS_SFLIGHT-PRICE.
ENDLOOP.
```

![Untitled](./Untitled%2015.png)

# DATABASE TABLE 제어 - SELECT

## JOIN

관계형 데이터베이스에서 여러 개의 테이블 값을 동시에 읽어올 경우 JOIN을 사용

두 테이블 간의 연결 조건은 ON을 사용

![Untitled](./Untitled%2016.png)

![Untitled](./Untitled%2017.png)

### INNER JOIN - 교집합

```abap
SELECT FIELD FROM TABLE INNER JOIN TABLE2 AS ALIAS
```

![Untitled](./Untitled%2018.png)

```abap
DATA: BEGIN OF GS_SFLIGHT,
  CARRID TYPE SFLIGHT-CARRID,
  CONNID TYPE SFLIGHT-CONNID,
  CARRNAME TYPE SCARR-CARRNAME,
END OF GS_SFLIGHT.
DATA: GT_SFLIGHT LIKE TABLE OF GS_SFLIGHT.

SELECT SFLIGHT~CARRID
  SFLIGHT~CONNID
  SCARR~CARRNAME
  INTO CORRESPONDING FIELDS OF TABLE GT_SFLIGHT
  FROM SFLIGHT INNER JOIN SCARR
  ON SFLIGHT~CARRID = SCARR~CARRID
  WHERE SFLIGHT~CARRID = 'AA'.

LOOP AT GT_SFLIGHT INTO GS_SFLIGHT.
  WRITE: / GS_SFLIGHT-CARRID, GS_SFLIGHT-CONNID, GS_SFLIGHT-CARRNAME.
ENDLOOP.
```

![Untitled](./Untitled%2019.png)

### OUTER JOIN - 합집합

```abap
SELECT FIELD FROM TABLE OUTER JOIN TABLE2 AS ALIAS ON [COND] [OPTIONS]
```

![Untitled](./Untitled%2020.png)

```abap
DATA: BEGIN OF GS_SFLIGHT,
  CARRID TYPE SFLIGHT-CARRID,
  CONNID TYPE SFLIGHT-CONNID,
  CARRNAME TYPE SCARR-CARRNAME,
END OF GS_SFLIGHT.
DATA: GT_SFLIGHT LIKE TABLE OF GS_SFLIGHT.

SELECT SFLIGHT~CARRID
  SFLIGHT~CONNID
  SCARR~CARRNAME
  INTO CORRESPONDING FIELDS OF TABLE GT_SFLIGHT
  FROM SFLIGHT LEFT OUTER JOIN SCARR
  ON SFLIGHT~CARRID = SCARR~CARRID
  WHERE SFLIGHT~CARRID = 'AA'.

LOOP AT GT_SFLIGHT INTO GS_SFLIGHT.
  WRITE: / GS_SFLIGHT-CARRID, GS_SFLIGHT-CONNID, GS_SFLIGHT-CARRNAME.
ENDLOOP.
```

![Untitled](./Untitled%2021.png)

## FOR ALL ENTRIES

INTERNAL TABLE과 DATABASE의 TABLE을 JOIN하는 개념과 유사

즉, DB TABLE에서 먼저 데이터를 SELECT한 후, 그 결과의 데이터 내에서 다시 한번 조회가 필요할 시 사용

```abap
SELECT FIELD FROM TABLE INTO TABLE ITAB1 FOR ALL ENTRIES IN ITAB2 WHERE [COND]
```

![Untitled](./Untitled%2022.png)

특징

- ITAB의 칼럼과 비교 대상 테이블의 칼럼 타입은 같아야 한다.
- LIKE, BETWEEN, IN과 같은 비교 구문은 사용할 수 없다.
- ITAB이 NULL이면 모든 데이터를 읽는다.
- UNIQUE KEY 기준시, ITAB의 중복된 값은 하나만 남는다.

![Untitled](./Untitled%2023.png)

![Untitled](./Untitled%2024.png)

```abap
DATA: BEGIN OF GS_SPFLI,
  CARRID TYPE SPFLI-CARRID,
  CONNID TYPE SPFLI-CONNID,
END OF GS_SPFLI.
DATA: GT_SPFLI LIKE TABLE OF GS_SPFLI.

DATA: BEGIN OF GS_SFLIGHT,
  CARRID TYPE SFLIGHT-CARRID,
  CONNID TYPE SFLIGHT-CONNID,
  FLDATE TYPE SFLIGHT-FLDATE,
  PRICE TYPE SFLIGHT-PRICE,
END OF GS_SFLIGHT.
DATA: GT_SFLIGHT LIKE TABLE OF GS_SFLIGHT.

SELECT CARRID
  CONNID
  FROM SPFLI
  INTO CORRESPONDING FIELDS OF TABLE GT_SPFLI
  WHERE CARRID LIKE 'A%'.

IF GT_SPFLI IS NOT INITIAL.
SELECT CARRID
  CONNID
  FLDATE
  PRICE
  FROM SFLIGHT
  INTO CORRESPONDING FIELDS OF TABLE GT_SFLIGHT
  FOR ALL ENTRIES IN GT_SPFLI
  WHERE CARRID = GT_SPFLI-CARRID
  AND CONNID = GT_SPFLI-CONNID.
ENDIF.

LOOP AT GT_SFLIGHT INTO GS_SFLIGHT.
  WRITE: / GS_SFLIGHT-CARRID, GS_SFLIGHT-CONNID, GS_SFLIGHT-FLDATE, GS_SFLIGHT-PRICE.
ENDLOOP.
```

![Untitled](./Untitled%2025.png)